/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.util.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class CarComparerToolTest {

    CarComparerTool classUnderTest;

	@Before
	public void setUp() {
		classUnderTest = new CarComparerTool();
		classUnderTest.cars = null;
	}

	@After
	public void tearDown() {
		classUnderTest.cars = null;
	}

    @Test public void testSomeLibraryMethod() {
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    @Test
    public void testItCanOrderByYear() {
    	
    	Car oldestCar = new Car("Honda", "Ford", "green", 2016, 23845, 33, 80);
    	Car newestCar = new Car("Ford", "Escape", "red", 2017, 23590, 78, 32);
		classUnderTest.cars = Arrays.asList(newestCar, oldestCar);

    	List<Car> actual = classUnderTest.orderByYear();

    	assertEquals(actual.get(0), newestCar);
    	assertEquals(actual.get(actual.size() - 1), oldestCar);
    }

    @Test
    public void testItCanOrderByMake() {

    	Car car1 = new Car("Honda", "CRV", "green", 2016, 23845, 80, 33);
    	Car car2 = new Car("Ford", "Escape", "red", 2017, 23590, 78, 32);
    	Car car3 = new Car("Hyundai", "SanteFe", "grey", 2016, 24950, 80, 27);
		classUnderTest.cars = Arrays.asList(car1, car2, car3);

    	List<Car> actual = classUnderTest.orderByMake();

    	assertEquals(actual.get(0), car2);
    	assertEquals(actual.get(1), car1);
    	assertEquals(actual.get(2), car3);
    }

    @Test
    public void testItCanOrderByModel() {

    	Car car1 = new Car("Hyundai", "SanteFe", "grey", 2016, 24950, 80, 27);
    	Car car2 = new Car("Ford", "Escape", "red", 2017, 23590, 78, 32);
    	Car car3 = new Car("Honda", "CRV", "green", 2016, 23845, 80, 33);
		classUnderTest.cars = Arrays.asList(car1, car2, car3);

    	List<Car> actual = classUnderTest.orderByModel();

    	assertEquals(actual.get(0), car3);
    	assertEquals(actual.get(1), car2);
    	assertEquals(actual.get(2), car1);
    }

    @Test
    public void testItCanOrderByPrice() {

    	Car car1 = new Car("Hyundai", "SanteFe", "grey", 2016, 24950, 80, 27);
    	Car car2 = new Car("Ford", "Escape", "red", 2017, 23590, 78, 32);
    	Car car3 = new Car("Honda", "CRV", "green", 2016, 23845, 80, 33);
		classUnderTest.cars = Arrays.asList(car1, car2, car3);

    	List<Car> actual = classUnderTest.orderByPrice();

    	assertEquals(actual.get(0), car2);
    	assertEquals(actual.get(1), car3);
    	assertEquals(actual.get(2), car1);
    }

    @Test
    public void testItCanCalculateFuelConsumption() {
    	Car car1 = new Car("Hyundai", "SanteFe", "grey", 2016, 24950, 80, 27);
    	int miles = 427;

    	int actual = classUnderTest.fuelConsumption(car1, 50);
    	
    	assertEquals(actual, 1350);
    }

    @Test
    public void testItCanReturnARandomCar() {

    	Car car1 = new Car("Hyundai", "SanteFe", "grey", 2016, 24950, 80, 27);
    	Car car2 = new Car("Ford", "Escape", "red", 2017, 23590, 78, 32);
    	Car car3 = new Car("Honda", "CRV", "green", 2016, 23845, 80, 33);
		classUnderTest.cars = Arrays.asList(car1, car2, car3);

    	Car actual1 = classUnderTest.random();
    	Car actual2 = classUnderTest.random();
    	Car actual3 = classUnderTest.random();
    	Car actual4 = classUnderTest.random();
    	Car actual5 = classUnderTest.random();
		
		// this is possible, but pretty unlikely
		assertTrue(actual1 != actual2 || actual1 != actual3 || actual1 != actual4 || actual1 != actual5);
    }

    @Test
    public void testItCanCalculateAverageMpgOfYear() {

    	Car car1 = new Car("Hyundai", "SanteFe", "grey", 2016, 24950, 80, 27);
    	Car car2 = new Car("Ford", "Escape", "red", 2017, 23590, 78, 32);
    	Car car3 = new Car("Honda", "CRV", "green", 2016, 23845, 80, 33);
		classUnderTest.cars = Arrays.asList(car1, car2, car3);

    	int actual = classUnderTest.averageMPG(2016);

    	assertEquals(actual, Math.round((27 + 33) / 2));
    }

    @Test
    public void testItKnowsTheBestValue() {

    	Car car1 = new Car("Hyundai", "SanteFe", "grey", 2017, 10000, 100, 20); // hands down best value
    	Car car2 = new Car("Ford", "Escape", "red", 2017, 23590, 78, 32);
    	Car car3 = new Car("Honda", "CRV", "green", 2016, 23845, 80, 33);
		classUnderTest.cars = Arrays.asList(car1, car2, car3);

    	Car actual = classUnderTest.bestValue();

    	assertEquals(actual, car1);
    }
}
